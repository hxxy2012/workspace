package com.hike.digitalgymnastic.http;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;

import com.google.gson.JsonSyntaxException;
import com.hike.digitalgymnastic.GuiderActivity;
import com.hike.digitalgymnastic.HikoDigitalgyApplication;
import com.hike.digitalgymnastic.tools.UtilLog;
import com.hike.digitalgymnastic.utils.LocalDataUtils;
import com.hike.digitalgymnastic.utils.NetworkUtil;
import com.hike.digitalgymnastic.utils.Utils;
import com.hiko.enterprisedigital.R;
import com.lidroid.xutils.HttpUtils;
import com.lidroid.xutils.exception.HttpException;
import com.lidroid.xutils.http.HttpHandler;
import com.lidroid.xutils.http.RequestParams;
import com.lidroid.xutils.http.ResponseInfo;
import com.lidroid.xutils.http.callback.RequestCallBack;
import com.lidroid.xutils.http.client.HttpRequest.HttpMethod;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.IOException;
import java.util.Set;

public abstract class IBaseRequest {

    protected INetResult mResult;
    protected Context context;
    private String TAG = "IBaseRequest";

    public IBaseRequest(INetResult activity, Context context) {
        this.mResult = activity;
        this.context = context;
    }

    /**
     * 得到结果后，对结果处理逻辑
     *
     * @param result
     * @param requestCode
     * @throws java.io.IOException
     * @throws JSONException
     * @throws JsonSyntaxException
     */
    public abstract void onRequestSuccess(JSONObject result, int requestCode)
            throws IOException, JsonSyntaxException, JSONException;

    public HttpHandler<String> httpHandler;

    public void postRequest(String url, final RequestParams req,
                            final int requestCode) {
        if (!NetworkUtil.isNetwork(context)) {
            Message msg = new Message();
            msg.what = -1000;
            handler.sendMessage(msg);

            // Utils.showMessage(context,
            // context.getResources().getString(R.string.no_connect_str));
            return;
        } else {

            UtilLog.e(TAG, "请求params===" + req.toString());
            HttpUtils hUtils = new HttpUtils(1000 * 10);
            hUtils.configCurrentHttpCacheExpiry(1000 * 10);// 超时时间
            httpHandler = hUtils.send(HttpMethod.POST, HttpConnectUtils.ip + url, req,
                    new RequestCallBack<String>() {

                        @Override
                        public void onLoading(long total, long current,
                                              boolean isUploading) {
                            super.onLoading(total, current, isUploading);
                        }

                        @Override
                        public void onSuccess(
                                final ResponseInfo<String> responseInfo) {
                            UtilLog.e(TAG,
                                    "-返回数据-->>"
                                            + responseInfo.result.toString());
                            JSONObject json = null;
                            try {

                                if ("image/jpeg"
                                        .equals(responseInfo.contentType
                                                .getValue())) {
                                    mResult.onRequestSuccess(responseInfo);
                                } else {
                                    json = new JSONObject(responseInfo.result);
                                }
                            } catch (JSONException e1) {
                                e1.printStackTrace();
                                mResult.onRequestFaild("0", "网络不给力哦");
                            }
                            try {
                                int code = json.getInt("code");
                                if (json != null && code == 0) {
                                    try {
                                        // handler.post(new Runnable() {
                                        //
                                        // @Override
                                        // public void run() {
                                        // // TODO Auto-generated method stub
                                        // // TODO Auto-generated method stub
                                        // JSONObject json=null;
                                        // try {
                                        // json = new
                                        // JSONObject(responseInfo.result);
                                        // onRequestSuccess(json, requestCode);
                                        // Message msg=new Message();
                                        // msg.obj=requestCode;
                                        // handler.sendMessage(msg);
                                        // } catch (Exception e) {
                                        // // TODO Auto-generated catch block
                                        // e.printStackTrace();
                                        // }
                                        // }
                                        // });

                                        new Thread(new Runnable() {
                                            @Override
                                            public void run() {
                                                // TODO Auto-generated method
                                                // stub
                                                JSONObject json = null;
                                                try {

                                                    json = new JSONObject(
                                                            responseInfo.result);
                                                    onRequestSuccess(json,
                                                            requestCode);
                                                    Message msg = new Message();
                                                    msg.obj = requestCode;
                                                    handler.sendMessage(msg);


                                                } catch (Exception e) {
                                                    // TODO Auto-generated catch
                                                    // block
                                                    e.printStackTrace();
                                                }
                                            }
                                        }).start();

                                        // onRequestSuccess(json, requestCode);
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                    // mResult.onRequestSuccess(requestCode);
                                } else if (json != null && code == 1) {
                                    try {
                                        Intent intent = new Intent(context,
                                                GuiderActivity.class);
                                        context.startActivity(intent);
                                        LocalDataUtils.saveLoginInfo(context,
                                                false);
                                        LocalDataUtils.saveBindMAC(context,
                                                null);
                                        Set<String> set = HikoDigitalgyApplication.map
                                                .keySet();
                                        String[] nameArray = new String[100];
                                        set.toArray(nameArray);

                                        for (String activityName : nameArray) {
                                            Activity ay = HikoDigitalgyApplication.map
                                                    .get(activityName);
                                            if (ay != null) {
                                                ay.finish();
                                            }
                                        }
                                        if (context instanceof Activity) {
                                            ((Activity) context).finish();
                                        }

                                        String headPath = Environment.getExternalStorageDirectory().getAbsolutePath() + "/" + context.getString(R.string.app_name) + "/分享/picHead.jpg";
                                        File file = new File(headPath);
                                        if (file.exists()) {
                                            file.delete();
                                        }
                                        HikoDigitalgyApplication application = (HikoDigitalgyApplication) context
                                                .getApplicationContext();
                                        application.logout();
                                        if (requestCode != 8)//调用获取用户接口不提示
                                            Utils.showMessage(context, "您的登录已失效,\n请重新登录");
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                } else {
                                    try {
                                        mResult.onRequestFaild(
                                                "" + json.getInt("code"),
                                                json.getString("message"));
                                        Utils.showMessage(context,"json数据请求为空");
                                    } catch (JSONException e) {
                                        e.printStackTrace();
                                    }
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                                mResult.onRequestFaild("0", "网络不给力哦");
                            }
                        }

                        @Override
                        public void onFailure(HttpException error, String msg) {

                            mResult.onRequestFaild("0", "网络不给力哦");
                        }

                        @Override
                        public void onStart() {
                            super.onStart();
                        }
                    });
        }
    }

    Handler handler = new Handler() {
        public void handleMessage(android.os.Message msg) {
            if (msg.what == -1000) {
                mResult.onNoConnect();
            } else {
                    mResult.onRequestSuccess((Integer) (msg.obj));
            }
        }

    };

}
