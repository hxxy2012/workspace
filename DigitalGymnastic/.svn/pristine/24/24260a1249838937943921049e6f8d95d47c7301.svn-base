package com.hike.digitalgymnastic;

import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.text.TextUtils;
import android.view.KeyEvent;

import com.hike.digitalgymnastic.entitiy.Customer;
import com.hike.digitalgymnastic.fragment.AboutUsFrament;
import com.hike.digitalgymnastic.fragment.AddClockFrament;
import com.hike.digitalgymnastic.fragment.BaseFragment;
import com.hike.digitalgymnastic.fragment.BodyStateTestFrament;
import com.hike.digitalgymnastic.fragment.FeedBackFrament;
import com.hike.digitalgymnastic.fragment.GenderFragment;
import com.hike.digitalgymnastic.fragment.GenderFragment.GenderDataCommucation;
import com.hike.digitalgymnastic.fragment.HeightFragment;
import com.hike.digitalgymnastic.fragment.HeightFragment.HeightDataCommucation;
import com.hike.digitalgymnastic.fragment.MenuFragment;
import com.hike.digitalgymnastic.fragment.MessageFrament;
import com.hike.digitalgymnastic.fragment.MyClockFrament;
import com.hike.digitalgymnastic.fragment.MyGooalFrament;
import com.hike.digitalgymnastic.fragment.MyMessageFrament;
import com.hike.digitalgymnastic.fragment.MyWatchFragment;
import com.hike.digitalgymnastic.fragment.PersonalInfoFragment;
import com.hike.digitalgymnastic.fragment.PicHeadFragment;
import com.hike.digitalgymnastic.fragment.SetFragment;
import com.hike.digitalgymnastic.fragment.SitLongTimeFrament;
import com.hike.digitalgymnastic.fragment.SportAlarmFrament;
import com.hike.digitalgymnastic.fragment.WeightFragment;
import com.hike.digitalgymnastic.fragment.YearFragment;
import com.hike.digitalgymnastic.fragment.YearFragment.AgeDataCommucation;
import com.hike.digitalgymnastic.utils.LocalDataUtils;
import com.hiko.enterprisedigital.R;
import com.lidroid.xutils.ViewUtils;
import com.lidroid.xutils.view.annotation.ContentView;
@ContentView(R.layout.frag_content)
public class MainMenuActivity extends BaseFragmentActivity {
	public static final int mode_enter = 1;
	public static final int mode_out = 2;
	/**
	 * 用于对Fragment进行管理
	 */
	private FragmentManager fragmentManager;
	private FragmentTransaction mFragmentTransaction;
	public static String curFragmentTag;
	private MenuFragment menuFragment; // 菜单界面
	private MyWatchFragment menuWatchFragment;// 我的手环
	private MessageFrament messageFrament;// 消息
	private MyMessageFrament myMessageFrament;// 我的消息
	private MyGooalFrament myGooalFrament;// 我的目标
	private MyClockFrament myclockFrament;// 我的闹钟
	private AddClockFrament addClockFrament;// 添加闹钟
	private SetFragment setFragment;// 设置
	private FeedBackFrament feedBackFrament;// 意见反馈
	private GenderFragment genderFragment;
	private YearFragment yearFragment;
	private HeightFragment heightFragment;
	private WeightFragment weightFragment;
	private PicHeadFragment picHeadFragment;
	public Customer customer;
	private String gender;
	private String year;
	private String height;
	private String weight;
	public String goalCalories;
	public String avatar;
	public String description;
	public String name;
	private Object sitLongTimeFragment;
	private int currentNum;
	private Fragment fragment;
	private Object sportAlarmFrament;
	private Object bodyStateTestFrament;
	private AboutUsFrament aboutUsFrament;
	private PersonalInfoFragment personalInfoFrament;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
//		Utils.toolBarManager(this,R.color.app_bg_login);
		ViewUtils.inject(this);
		overridePendingTransition(R.anim.menu_in, 0);  
		fragmentManager = getSupportFragmentManager();
		setCurrentFragment();
		initData();
	}

	private void initData() {
		customer = LocalDataUtils.readCustomer(this);
		name = customer.getName();
		avatar = customer.getAvatar();
		gender = customer.getGender();
		year = customer.getYear();
		height = customer.getHeight();
		weight = customer.getWeight();
		goalCalories = customer.getGoalCalories();
		description = customer.getDescription();
	}
	
	public void setCurrentFragment() {
		mFragmentTransaction = fragmentManager.beginTransaction();
		if (menuFragment == null) {
			// 如果MessageFragment为空，则创建一个并添加到界面上
			menuFragment = new MenuFragment();
			Bundle args = new Bundle();
			menuFragment.setArguments(args);
			mFragmentTransaction.add(R.id.content_frame, menuFragment,getString(R.string.menu_frament));
			commitTransactions();
		}
		curFragmentTag = getString(R.string.menu_frament);
	}

	public void fragmentBack() {
		if (TextUtils.equals(curFragmentTag, getString(R.string.menu_frament))) {
//			startActivity(new Intent(MainMenuActivity.this, MainActivity.class));
			// AnimUtil.intentSlidIn(MainMenuActivity.this);
			
//			overridePendingTransition(0, R.anim.menu_out);  
			finish();
			overridePendingTransition(0, R.anim.menu_out); 
			return;
		} else {
			if (TextUtils.equals(curFragmentTag, getString(R.string.menu_my_message))
					|| TextUtils.equals(curFragmentTag, getString(R.string.menu_message))
					|| TextUtils.equals(curFragmentTag, getString(R.string.menu_my_watch))
					|| TextUtils.equals(curFragmentTag, getString(R.string.menu_set))
					|| TextUtils.equals(curFragmentTag, getString(R.string.menu_add_my_clock))
					|| TextUtils.equals(curFragmentTag, getString(R.string.menu_my_goal))) {
				setTabSelection(getString(R.string.menu_frament), mode_out);
			} else if (TextUtils.equals(curFragmentTag, getString(R.string.menu_feedback)) 
					|| TextUtils.equals(curFragmentTag, getString(R.string.sit_long_alarm))
							|| TextUtils.equals(curFragmentTag, getString(R.string.body_test_alarm))
									|| TextUtils.equals(curFragmentTag, getString(R.string.sport_alarm))
									|| TextUtils.equals(curFragmentTag, getString(R.string.about_us))) {
				setTabSelection(getString(R.string.menu_set), mode_out);
			} else if (TextUtils.equals(curFragmentTag, getString(R.string.gender))
					|| TextUtils.equals(curFragmentTag, getString(R.string.height))
					|| TextUtils.equals(curFragmentTag, getString(R.string.weight))
					|| TextUtils.equals(curFragmentTag, getString(R.string.year))) {
				setTabSelection(getString(R.string.menu_my_message), MainFragment.mode_out);
				// }else if(TextUtils.equals(curFragmentTag,
				// getString(R.string.menu_frament))){
				// setTabSelection(getString(R.string.home_frament),mode_enter);
			} else if (TextUtils.equals(curFragmentTag, getString(R.string.menu_my_clock))) {
				setTabSelection(getString(R.string.menu_add_my_clock), mode_out);
			}
		}
	}

	/**
	 * 根据传入的tag参数来设置选中的tab页。
	 * 
	 * @param tag
	 * 
	 */
	public void setTabSelection(String tag, int num) {
		currentNum = num;
		// 开启一个Fragment事务
		mFragmentTransaction = fragmentManager.beginTransaction();
//		if (num == mode_enter) {
//			mFragmentTransaction.setCustomAnimations(R.anim.next_right_in, R.anim.next_right_out);
//		} else {
//			mFragmentTransaction.setCustomAnimations(R.anim.next_view_enter, R.anim.next_view_out);
//		}
		if (TextUtils.equals(tag, getString(R.string.menu_frament))) {
			if (menuFragment == null) {
				menuFragment = new MenuFragment();
			}
		} else if (TextUtils.equals(tag, getString(R.string.menu_my_watch))) {
			if (menuWatchFragment == null) {
				menuWatchFragment = new MyWatchFragment();
			}
//			Intent intent=new Intent(this, MyWatchFragment.class);
//			startActivity(intent);
//			return;
		} else if (TextUtils.equals(tag, getString(R.string.menu_my_goal))) {
			if (myGooalFrament == null) {
				myGooalFrament = new MyGooalFrament();
			}
		} else if (TextUtils.equals(tag, getString(R.string.menu_my_message))) {
			if (myMessageFrament == null) {
				myMessageFrament = new MyMessageFrament();
			}
		} else if (TextUtils.equals(tag, getString(R.string.menu_set))) {
			if (setFragment == null) {
				setFragment = new SetFragment();
			}
		}else if (TextUtils.equals(tag, getString(R.string.menu_add_my_clock))) {
			if (addClockFrament == null) {
				addClockFrament = new AddClockFrament();
			}
		} else if (TextUtils.equals(tag, getString(R.string.menu_my_clock))) {
			if (myclockFrament == null) {
				myclockFrament = new MyClockFrament();
			}
		} else if (TextUtils.equals(tag, getString(R.string.menu_message))) {
			if (messageFrament == null) {
				messageFrament = new MessageFrament();
			}
		} else if (TextUtils.equals(tag, getString(R.string.menu_feedback))) {
			if (feedBackFrament == null) {
				feedBackFrament = new FeedBackFrament();
			}
		} else if (TextUtils.equals(tag, getString(R.string.gender))) {
			if (genderFragment == null) {
				genderFragment = new GenderFragment();
			}

		} else if (TextUtils.equals(tag, getString(R.string.year))) {
			if (yearFragment == null) {
				yearFragment = new YearFragment();
			}
		} else if (TextUtils.equals(tag, getString(R.string.height))) {
			if (heightFragment == null) {
				heightFragment = new HeightFragment();
			}
		} else if (TextUtils.equals(tag, getString(R.string.weight))) {
			if (weightFragment == null) {
				weightFragment = new WeightFragment();
			}
		} else if (TextUtils.equals(tag, getString(R.string.pichead))) {
			if (picHeadFragment == null) {
				picHeadFragment = new PicHeadFragment();
			} 
		} else if (TextUtils.equals(tag, getString(R.string.sit_long_alarm))) {
			if (sitLongTimeFragment == null) {
				sitLongTimeFragment = new SitLongTimeFrament();
		} 
		} else if (TextUtils.equals(tag, getString(R.string.sport_alarm))) {
			if (sportAlarmFrament == null) {
				sportAlarmFrament = new SportAlarmFrament();}
		} else if (TextUtils.equals(tag, getString(R.string.body_test_alarm))) {
			if (bodyStateTestFrament == null) {
				bodyStateTestFrament = new BodyStateTestFrament();
			} 
		}else if (TextUtils.equals(tag, getString(R.string.about_us))) {
			if (aboutUsFrament == null) {
				aboutUsFrament = new AboutUsFrament();
			} 
		}else if (TextUtils.equals(tag, getString(R.string.per_info))) {
			if (personalInfoFrament == null) {
				personalInfoFrament = new PersonalInfoFragment();
			}
		}
		switchFragment(tag);
	}

	public void switchFragment(String tag) {
		if (TextUtils.equals(tag, curFragmentTag)) {
			return;
		}
		if (curFragmentTag != null) {
			mFragmentTransaction.hide(getFragment(curFragmentTag));
		}
		
		attachFragment(R.id.content_frame, getFragment(tag), tag);
		curFragmentTag = tag;
		commitTransactions();
	}

	private FragmentTransaction ensureTransaction() {
		if (mFragmentTransaction == null) {
			mFragmentTransaction = fragmentManager.beginTransaction();
			mFragmentTransaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
			mFragmentTransaction.setCustomAnimations(R.anim.push_top_in,R.anim.push_top_out);
		}
		return mFragmentTransaction;
	}

	private void attachFragment(int layout, Fragment f, String tag) {
		if (f != null) {
			if (f.isAdded()) {
				mFragmentTransaction.show(f);
			} else {
				ensureTransaction();
				mFragmentTransaction.add(layout, f, tag);
			}
		}
	}

	private void commitTransactions() {
		if (mFragmentTransaction != null && !mFragmentTransaction.isEmpty()) {
			mFragmentTransaction.commit();
			mFragmentTransaction = null;
		}
	}

	private Fragment getFragment(String tag) {
		fragment = fragmentManager.findFragmentByTag(tag);
		if (fragment == null) {
			
			fragment = BaseFragment.newInstance(getApplicationContext(), tag);
		}
		
		return fragment;
	}
	
	//个人信息，返回按键回调
	MyMessageFrament.DataCommuiation dataCommuiation;
	public void setDataCommuiation(MyMessageFrament.DataCommuiation dataCommuiation) {
		this.dataCommuiation = dataCommuiation;
	}
	

	//性别，返回按键回调
		GenderDataCommucation genderDataCommucation;
		public void setGenderDataCommucation(GenderDataCommucation genderDataCommucation) {
			this.genderDataCommucation = genderDataCommucation;
		}
		//年龄，返回键回调
		
		AgeDataCommucation ageDataCommucation;
	public void setAgeDataCommucation(AgeDataCommucation ageDataCommucation) {
			this.ageDataCommucation = ageDataCommucation;
		}
	//身高，返回键回调
	HeightDataCommucation heightDataCommucation;
	public void setHeightDataCommucation(HeightDataCommucation heightDataCommucation) {
		this.heightDataCommucation = heightDataCommucation;
	}
	WeightFragment.WeightDataCommucation weightDataCommucation;
	
	
	public void setWeightDataCommucation(
			WeightFragment.WeightDataCommucation weightDataCommucation) {
		this.weightDataCommucation = weightDataCommucation;
	}
	//久坐提醒
	SitLongTimeFrament.SitLongDataCommucation sitLongDataCommucation;
	public void setSitLongDataCommucation(SitLongTimeFrament.SitLongDataCommucation sitLongDataCommucation) {
		this.sitLongDataCommucation = sitLongDataCommucation;
	}	
	//运动提醒
	SportAlarmFrament.SportDataCommucation sportDataCommucation;
	public void setSportDataCommucation(SportAlarmFrament.SportDataCommucation sportDataCommucation) {
		this.sportDataCommucation = sportDataCommucation;
	}
	//体测提醒
	BodyStateTestFrament.BodyTestCommucation bodyTestCommucation;
	public void setBodyTestCommucation(BodyStateTestFrament.BodyTestCommucation bodyTestCommucation) {
		this.bodyTestCommucation = bodyTestCommucation;
	}
	//第一次登陆个人资料引导页面
	PersonalInfoFragment.PersonalInfoCommucation perInfoCommucation;
	public void setPersonalInfoCommucation(PersonalInfoFragment.PersonalInfoCommucation perInfoCommucation) {
		this.perInfoCommucation = perInfoCommucation;
	}
	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		if (keyCode == KeyEvent.KEYCODE_BACK) {
			//个人信息页面返回
			if (TextUtils.equals(curFragmentTag, getString(R.string.menu_my_message))){
				if(myMessageFrament!=null&&dataCommuiation!=null){
					dataCommuiation.onKyDown();
					
				}else{
					return true;
				}
			}else if(TextUtils.equals(curFragmentTag, getString(R.string.gender))){
				
				if(genderFragment!=null&&genderDataCommucation!=null){
					genderDataCommucation.onKeyDown();
				}else{
					return true;
				}
				
			}else if(TextUtils.equals(curFragmentTag, getString(R.string.year))){
				
				if(yearFragment!=null&&ageDataCommucation!=null){
					ageDataCommucation.onKeyDown();
				}else{
					return true;
				}
				
			}else if(TextUtils.equals(curFragmentTag, getString(R.string.height))){
				
				if(heightFragment!=null&&heightDataCommucation!=null){
					heightDataCommucation.onKeyDown();
				}else{
					return true;
				}
				
			}else if(TextUtils.equals(curFragmentTag, getString(R.string.weight))){
				
				if(weightFragment!=null&&weightDataCommucation!=null){
					weightDataCommucation.onKeyDown();
				}else{
					return true;
				}
			}else if(TextUtils.equals(curFragmentTag, getString(R.string.sit_long_alarm))){
				//久坐提醒
				if(sitLongTimeFragment!=null&&sitLongDataCommucation!=null){
					sitLongDataCommucation.onKeyDown();
				}else{
					return true;
				}
			}else if(TextUtils.equals(curFragmentTag, getString(R.string.sport_alarm))){
				//运动提醒
				if(sportAlarmFrament!=null&&sportDataCommucation!=null){
					sportDataCommucation.onKeyDown();
				}else{
					return true;
				}
			}else if(TextUtils.equals(curFragmentTag, getString(R.string.body_test_alarm))){
				//体测提醒
				if(bodyStateTestFrament!=null&&bodyTestCommucation!=null){
					bodyTestCommucation.onKeyDown();
				}else{
					return true;
				}
			}else if(TextUtils.equals(curFragmentTag, getString(R.string.per_info))){
				//个人资料
				if(personalInfoFrament!=null&&perInfoCommucation!=null){
					perInfoCommucation.onKeyDown();
				}else{
					return true;
				}
			}
			
			else{
				fragmentBack();
			}
			return true;

		}
		return super.onKeyDown(keyCode, event);
	}

	public Customer getCustomer() {
		return customer;
	}
	
	public String getAvatar() {
		return avatar;
	}
	
	public void setAvatar(String avatar) {
		this.avatar = avatar;
	}

	/**
	 * 获取性别
	 */
	public String getGender() {
		return gender;
	}
	public void setGender(String gender) {
		this.gender = gender;
		fragmentBack();
	}

	/**
	 * 获取年龄
	 */
	public String getYear() {
		return year;
	}
	public void setYear(String currentAge) {
		fragmentBack();
		this.year = currentAge;
	}

	/**
	 * 设置身高
	 * 
	 * @param height
	 */
	public void setHeight(String height) {
		this.height = height;
		fragmentBack();
	}

	/**
	 * 获取体重
	 */
	
	public String getWeight() {
		return weight;
	}
	public void setWeight(String currentWeight) {
		this.weight = currentWeight;
		fragmentBack();
	}
	
	public String getGoalCalories() {
		return goalCalories;
	}

	public void setGoalCalories(String goalCalories) {
		this.goalCalories = goalCalories;
	}

	public String getHeight() {
		return height;
	}
	public String getDescription() {
		return description;
	}

	public String getName() {
		return name;
	}

//	@Override
//	protected void onResume() {
//		super.onResume();
//		Utils.toolBarManager(this, R.color.app_bg_login);
//	}


	@Override
	public void finish() {
		clear();
		super.finish();
	}

	private void clear(){
		menuFragment=null; // 菜单界面
		menuWatchFragment=null;// 我的手环
		messageFrament=null;// 消息
		myMessageFrament=null;// 我的消息
		myGooalFrament=null;// 我的目标
		myclockFrament=null;// 我的闹钟
		addClockFrament=null;// 添加闹钟
		setFragment=null;// 设置
		feedBackFrament=null;// 意见反馈
		genderFragment=null;
		yearFragment=null;
		heightFragment=null;
		weightFragment=null;
		picHeadFragment=null;
	}
}
