package com.hike.digitalgymnastic;

import android.content.Intent;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.text.TextUtils;
import android.view.KeyEvent;

import com.hike.digitalgymnastic.fragment.AboutUsFrament;
import com.hike.digitalgymnastic.fragment.BaseFragment;
import com.hike.digitalgymnastic.fragment.BodyStateTestFrament;
import com.hike.digitalgymnastic.fragment.FeedBackFrament;
import com.hike.digitalgymnastic.fragment.HomeFragment;
import com.hike.digitalgymnastic.fragment.MenuFragment;
import com.hike.digitalgymnastic.fragment.MessageFrament;
import com.hike.digitalgymnastic.fragment.MyClockFrament;
import com.hike.digitalgymnastic.fragment.MyGooalFrament;
import com.hike.digitalgymnastic.fragment.MyMessageFrament;
import com.hike.digitalgymnastic.fragment.MyWatchFragment;
import com.hike.digitalgymnastic.fragment.SetFragment;
import com.hike.digitalgymnastic.fragment.SitLongTimeFrament;
import com.hike.digitalgymnastic.fragment.SportAlarmFrament;
import com.hike.digitalgymnastic.utils.Utils;
import com.lidroid.xutils.ViewUtils;
import com.lidroid.xutils.view.annotation.ContentView;
import com.hiko.enterprisedigital.R;
/*
 * 待用
 */
@ContentView(R.layout.frag_content)
public class HomeActivity extends BluetoothActivity {
	public static final int mode_enter = 1;
	public static final int mode_out = 2;
	/**
	 * 用于对Fragment进行管理
	 */
	private FragmentManager fragmentManager;
	private FragmentTransaction mFragmentTransaction;
	public static String curFragmentTag;
	private HomeFragment homeFragment;// 主页
	private MenuFragment menuFragment; // 菜单界面
	private MyWatchFragment menuWatchFragment;// 我的手环
	private MessageFrament messageFrament;// 消息
	private MyMessageFrament myMessageFrament;// 消息
	private MyGooalFrament myGooalFrament;// 消息
	private MyClockFrament myclockFrament;// 消息
	private SetFragment setFragment;// 设置
	private FeedBackFrament feedBackFrament;// 意见反馈
	private Bitmap bitmap;
	private Object sitLongTimeFragment;
	private Object sportAlarmFrament;
	private Object bodyStateTestFrament;
	private Object aboutUsFrament;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		ViewUtils.inject(this);
		fragmentManager = getSupportFragmentManager();
		// Init();
		setCurrentFragment();
	}

	private void Init() {
		Intent intent = getIntent();
		// if(intent!=null)
		// {
		// bitmap=intent.getParcelableExtra("bitmap");
		// }

	}

	public void setCurrentFragment() {
		mFragmentTransaction = fragmentManager.beginTransaction();
		if (homeFragment == null) {
			// 如果MessageFragment为空，则创建一个并添加到界面上
			homeFragment = new HomeFragment();
			Bundle args = new Bundle();
			homeFragment.setArguments(args);
			mFragmentTransaction.add(R.id.content_frame, homeFragment,
					getString(R.string.home_frament));
			commitTransactions();
		}
		curFragmentTag = getString(R.string.home_frament);
	}

	public void FragmentBack() {
		if (TextUtils.equals(curFragmentTag, getString(R.string.home_frament))) {
			finish();
			return;
		} else {
			if (TextUtils.equals(curFragmentTag,
					getString(R.string.menu_my_message))
					|| TextUtils.equals(curFragmentTag,
							getString(R.string.menu_message))
					|| TextUtils.equals(curFragmentTag,
							getString(R.string.menu_my_watch))
					|| TextUtils.equals(curFragmentTag,
							getString(R.string.menu_set))
					|| TextUtils.equals(curFragmentTag,
							getString(R.string.menu_my_clock))
					|| TextUtils.equals(curFragmentTag,
							getString(R.string.menu_my_goal))) {
				setTabSelection(getString(R.string.menu_frament), mode_out);
			} else if (TextUtils.equals(curFragmentTag,
					getString(R.string.menu_feedback))) {
				setTabSelection(getString(R.string.menu_set), mode_out);
			} else if (TextUtils.equals(curFragmentTag,
					getString(R.string.menu_frament))) {
				setTabSelection(getString(R.string.home_frament), mode_enter);
			}
		}
	}

	/**
	 * 根据传入的tag参数来设置选中的tab页。
	 * 
	 * @param tag
	 * 
	 */
	public void setTabSelection(String tag, int num) {
		// 开启一个Fragment事务
		mFragmentTransaction = fragmentManager.beginTransaction();
		if (num == mode_enter) {
			mFragmentTransaction.setCustomAnimations(R.anim.next_right_in,
					R.anim.next_right_out);
		} else {
			mFragmentTransaction.setCustomAnimations(R.anim.next_view_enter,
					R.anim.next_view_out);
		}

		if (TextUtils.equals(tag, getString(R.string.home_frament))) {
			if (homeFragment == null) {
				homeFragment = new HomeFragment();
			}
		} else if (TextUtils.equals(tag, getString(R.string.menu_frament))) {
			if (menuFragment == null) {
				menuFragment = new MenuFragment();
			}
		} else if (TextUtils.equals(tag, getString(R.string.menu_my_watch))) {
			if (menuWatchFragment == null) {
				menuWatchFragment = new MyWatchFragment();
			}
		} else if (TextUtils.equals(tag, getString(R.string.menu_my_goal))) {
			if (myGooalFrament == null) {
				myGooalFrament = new MyGooalFrament();
			}
		} else if (TextUtils.equals(tag, getString(R.string.menu_my_message))) {
			if (myMessageFrament == null) {
				myMessageFrament = new MyMessageFrament();
			}
		} else if (TextUtils.equals(tag, getString(R.string.menu_set))) {
			if (setFragment == null) {
				setFragment = new SetFragment();
			}

		} else if (TextUtils.equals(tag, getString(R.string.menu_my_clock))) {
			if (myclockFrament == null) {
				myclockFrament = new MyClockFrament();
			}
		} else if (TextUtils.equals(tag, getString(R.string.menu_message))) {
			if (messageFrament == null) {
				messageFrament = new MessageFrament();
			}
		} else if (TextUtils.equals(tag, getString(R.string.menu_feedback))) {
			if (feedBackFrament == null) {
				feedBackFrament = new FeedBackFrament();
			}
		} else if (TextUtils.equals(tag, getString(R.string.sit_long_alarm))) {
			if (sitLongTimeFragment == null) {
				sitLongTimeFragment = new SitLongTimeFrament();
			}
		} else if (TextUtils.equals(tag, getString(R.string.sport_alarm))) {
			if (sportAlarmFrament == null) {
				sportAlarmFrament = new SportAlarmFrament();
			}
		} else if (TextUtils.equals(tag, getString(R.string.body_test_alarm))) {
			if (bodyStateTestFrament == null) {
				bodyStateTestFrament = new BodyStateTestFrament();
			}
		}else if (TextUtils.equals(tag, getString(R.string.about_us))) {
			if (aboutUsFrament == null) {
				aboutUsFrament = new AboutUsFrament();
			}
		}

		switchFragment(tag);
	}

	public void switchFragment(String tag) {
		if (TextUtils.equals(tag, curFragmentTag)) {
			return;
		}
		if (curFragmentTag != null) {
			mFragmentTransaction.hide(getFragment(curFragmentTag));
		}
		attachFragment(R.id.content_frame, getFragment(tag), tag);
		curFragmentTag = tag;
		commitTransactions();
	}

	private FragmentTransaction ensureTransaction() {
		if (mFragmentTransaction == null) {
			mFragmentTransaction = fragmentManager.beginTransaction();
			mFragmentTransaction
					.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
			mFragmentTransaction.setCustomAnimations(R.anim.push_top_in,
					R.anim.push_top_out);
		}
		return mFragmentTransaction;
	}

	private void attachFragment(int layout, Fragment f, String tag) {
		if (f != null) {
			if (f.isAdded()) {
				mFragmentTransaction.show(f);
			} else {
				ensureTransaction();
				mFragmentTransaction.add(layout, f, tag);
			}
		}
	}

	private void commitTransactions() {
		if (mFragmentTransaction != null && !mFragmentTransaction.isEmpty()) {
			mFragmentTransaction.commit();
			mFragmentTransaction = null;
		}
	}

	private Fragment getFragment(String tag) {
		Fragment f = fragmentManager.findFragmentByTag(tag);
		if (f == null) {
			f = BaseFragment.newInstance(getApplicationContext(), tag);
		}
		return f;
	}

	boolean isExit = false;

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		if (keyCode == KeyEvent.KEYCODE_BACK) {
			if (TextUtils.equals(curFragmentTag,
					getString(R.string.home_frament))) {
				exit();
			} else {
				FragmentBack();
			}
			return false;
		} else {
			return super.onKeyDown(keyCode, event);
		}
	}

	public void exit() {

		if (!isExit) {
			isExit = true;
			Utils.showMessage(this, "再按一次退出程序");
			mHandler.postDelayed(new Runnable() {

				@Override
				public void run() {
					mHandler.sendEmptyMessage(0);
				}
			}, 3000);
		} else {
			finish();
		}
	}

	Handler mHandler = new Handler() {

		@Override
		public void handleMessage(Message msg) {
			// TODO Auto-generated method stub
			super.handleMessage(msg);
			isExit = false;
		}
	};

}
