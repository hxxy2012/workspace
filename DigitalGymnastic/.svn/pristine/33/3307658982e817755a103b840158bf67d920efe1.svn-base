package com.hike.digitalgymnastic.utils;

import com.google.gson.Gson;
import com.hike.digitalgymnastic.entitiy.AllRemind;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.pm.PackageManager.NameNotFoundException;
import android.text.TextUtils;

/**
 * PreferencesUtils, easy to get or put data
 * <ul>
 * <strong>Preference Name</strong>
 * <li>you can change preference name by {@link #PREFERENCE_NAME}</li>
 * </ul>
 * <ul>
 * <strong>Put Value</strong>
 * <li>put string {@link #putString(Context, String, String)}</li>
 * <li>put int {@link #putInt(Context, String, int)}</li>
 * <li>put long {@link #putLong(Context, String, long)}</li>
 * <li>put float {@link #putFloat(Context, String, float)}</li>
 * <li>put boolean {@link #putBoolean(Context, String, boolean)}</li>
 * </ul>
 * <ul>
 * <strong>Get Value</strong>
 * <li>get string {@link #getString(Context, String)},
 * {@link #getString(Context, String, String)}</li>
 * <li>get int {@link #getInt(Context, String)},
 * {@link #getInt(Context, String, int)}</li>
 * <li>get long {@link #getLong(Context, String)},
 * {@link #getLong(Context, String, long)}</li>
 * <li>get float {@link #getFloat(Context, String)},
 * {@link #getFloat(Context, String, float)}</li>
 * <li>get boolean {@link #getBoolean(Context, String)},
 * {@link #getBoolean(Context, String, boolean)}</li>
 * </ul>
 * 
 * @author <a href="http://www.trinea.cn" target="_blank">Trinea</a> 2013-3-6
 */
public class PreferencesUtils {

	public static String PREFERENCE_NAME = "digitalgymnastic";

	public static boolean hasString(Context context, String key) {
		try {
			Context otherContext = context.createPackageContext(
					Contants.SAVEDATAPACKAGENAME,
					Context.CONTEXT_IGNORE_SECURITY);
			SharedPreferences settings = otherContext.getSharedPreferences(
					PREFERENCE_NAME, Context.MODE_WORLD_WRITEABLE);
			return settings.contains(key);
		} catch (NameNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return false;
	}

	/**
	 * put string preferences
	 * 
	 * @param context
	 * @param key
	 *            The name of the preference to modify
	 * @param value
	 *            The new value for the preference
	 * @return True if the new values were successfully written to persistent
	 *         storage.
	 */
	public static boolean putString(Context context, String key, String value) {
		// SharedPreferences settings = context.getSharedPreferences(
		// PREFERENCE_NAME, Context.MODE_PRIVATE);
		try {
			Context otherContext = context.createPackageContext(
					Contants.SAVEDATAPACKAGENAME,
					Context.CONTEXT_IGNORE_SECURITY);
			SharedPreferences settings = otherContext.getSharedPreferences(
					PREFERENCE_NAME, Context.MODE_WORLD_WRITEABLE);
			SharedPreferences.Editor editor = settings.edit();
			editor.putString(key, value);
			return editor.commit();
		} catch (NameNotFoundException e) {
			e.printStackTrace();
		}
		return false;
	}

	/**
	 * get string preferences
	 * 
	 * @param context
	 * @param key
	 *            The name of the preference to retrieve
	 * @return The preference value if it exists, or null. Throws
	 *         ClassCastException if there is a preference with this name that
	 *         is not a string
	 * @see #getString(Context, String, String)
	 */
	public static String getString(Context context, String key) {
		return getString(context, key, null);
	}

	/**
	 * get string preferences
	 * 
	 * @param context
	 * @param key
	 *            The name of the preference to retrieve
	 * @param defaultValue
	 *            Value to return if this preference does not exist
	 * @return The preference value if it exists, or defValue. Throws
	 *         ClassCastException if there is a preference with this name that
	 *         is not a string
	 */
	public static String getString(Context context, String key,
			String defaultValue) {
		try {
			Context otherContext = context.createPackageContext(
					Contants.SAVEDATAPACKAGENAME,
					Context.CONTEXT_IGNORE_SECURITY);
			SharedPreferences settings = otherContext.getSharedPreferences(
					PREFERENCE_NAME, Context.MODE_WORLD_WRITEABLE);
			return settings.getString(key, defaultValue);
		} catch (NameNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return defaultValue;
	}

	/**
	 * put int preferences
	 * 
	 * @param context
	 * @param key
	 *            The name of the preference to modify
	 * @param value
	 *            The new value for the preference
	 * @return True if the new values were successfully written to persistent
	 *         storage.
	 */
	public static boolean putInt(Context context, String key, int value) {
		Context otherContext;
		try {
			otherContext = context.createPackageContext(
					Contants.SAVEDATAPACKAGENAME,
					Context.CONTEXT_IGNORE_SECURITY);
			SharedPreferences settings = otherContext.getSharedPreferences(
					PREFERENCE_NAME, Context.MODE_WORLD_WRITEABLE);
			SharedPreferences.Editor editor = settings.edit();
			editor.putInt(key, value);
			return editor.commit();
		} catch (NameNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return false;
	}

	/**
	 * get int preferences
	 * 
	 * @param context
	 * @param key
	 *            The name of the preference to retrieve
	 * @return The preference value if it exists, or -1. Throws
	 *         ClassCastException if there is a preference with this name that
	 *         is not a int
	 * @see #getInt(Context, String, int)
	 */
	public static int getInt(Context context, String key) {
		Context otherContext;
		try {
			otherContext = context.createPackageContext(
					Contants.SAVEDATAPACKAGENAME,
					Context.CONTEXT_IGNORE_SECURITY);
			SharedPreferences settings = otherContext.getSharedPreferences(
					PREFERENCE_NAME, Context.MODE_WORLD_WRITEABLE);
			return getInt(otherContext, key, -1);
		} catch (NameNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return -1;
	}

	/**
	 * get int preferences
	 * 
	 * @param context
	 * @param key
	 *            The name of the preference to retrieve
	 * @param defaultValue
	 *            Value to return if this preference does not exist
	 * @return The preference value if it exists, or defValue. Throws
	 *         ClassCastException if there is a preference with this name that
	 *         is not a int
	 */
	public static int getInt(Context context, String key, int defaultValue) {
		Context otherContext;
		try {
			otherContext = context.createPackageContext(
					Contants.SAVEDATAPACKAGENAME,
					Context.CONTEXT_IGNORE_SECURITY);
			SharedPreferences settings = otherContext.getSharedPreferences(
					PREFERENCE_NAME, Context.MODE_WORLD_WRITEABLE);
			return settings.getInt(key, defaultValue);
		} catch (NameNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return defaultValue;
	}

	/**
	 * put long preferences
	 * 
	 * @param context
	 * @param key
	 *            The name of the preference to modify
	 * @param value
	 *            The new value for the preference
	 * @return True if the new values were successfully written to persistent
	 *         storage.
	 */
	public static boolean putLong(Context context, String key, long value) {
		Context otherContext;
		try {
			otherContext = context.createPackageContext(
					Contants.SAVEDATAPACKAGENAME,
					Context.CONTEXT_IGNORE_SECURITY);
			SharedPreferences settings = otherContext.getSharedPreferences(
					PREFERENCE_NAME, Context.MODE_WORLD_WRITEABLE);
			SharedPreferences.Editor editor = settings.edit();
			editor.putLong(key, value);
			return editor.commit();
		} catch (NameNotFoundException e) {
			e.printStackTrace();
		}
		return false;
	}

	/**
	 * get long preferences
	 * 
	 * @param context
	 * @param key
	 *            The name of the preference to retrieve
	 * @return The preference value if it exists, or -1. Throws
	 *         ClassCastException if there is a preference with this name that
	 *         is not a long
	 * @see #getLong(Context, String, long)
	 */
	public static long getLong(Context context, String key) {
		return getLong(context, key, -1);
	}

	/**
	 * get long preferences
	 * 
	 * @param context
	 * @param key
	 *            The name of the preference to retrieve
	 * @param defaultValue
	 *            Value to return if this preference does not exist
	 * @return The preference value if it exists, or defValue. Throws
	 *         ClassCastException if there is a preference with this name that
	 *         is not a long
	 */
	public static long getLong(Context context, String key, long defaultValue) {
		Context otherContext;
		try {
			otherContext = context.createPackageContext(
					Contants.SAVEDATAPACKAGENAME,
					Context.CONTEXT_IGNORE_SECURITY);
			SharedPreferences settings = otherContext.getSharedPreferences(
					PREFERENCE_NAME, Context.MODE_WORLD_WRITEABLE);
			return settings.getLong(key, defaultValue);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return defaultValue;
	}

	/**
	 * put float preferences
	 * 
	 * @param context
	 * @param key
	 *            The name of the preference to modify
	 * @param value
	 *            The new value for the preference
	 * @return True if the new values were successfully written to persistent
	 *         storage.
	 */
	public static boolean putFloat(Context context, String key, float value) {
		Context otherContext;
		try {
			otherContext = context.createPackageContext(
					Contants.SAVEDATAPACKAGENAME,
					Context.CONTEXT_IGNORE_SECURITY);
			SharedPreferences settings = otherContext.getSharedPreferences(
					PREFERENCE_NAME, Context.MODE_WORLD_WRITEABLE);
			SharedPreferences.Editor editor = settings.edit();
			editor.putFloat(key, value);
			return editor.commit();
		} catch (NameNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return false;
	}

	/**
	 * get float preferences
	 * 
	 * @param context
	 * @param key
	 *            The name of the preference to retrieve
	 * @return The preference value if it exists, or -1. Throws
	 *         ClassCastException if there is a preference with this name that
	 *         is not a float
	 * @see #getFloat(Context, String, float)
	 */
	public static float getFloat(Context context, String key) {
		return getFloat(context, key, -1);
	}

	/**
	 * get float preferences
	 * 
	 * @param context
	 * @param key
	 *            The name of the preference to retrieve
	 * @param defaultValue
	 *            Value to return if this preference does not exist
	 * @return The preference value if it exists, or defValue. Throws
	 *         ClassCastException if there is a preference with this name that
	 *         is not a float
	 */
	public static float getFloat(Context context, String key, float defaultValue) {
		Context otherContext;
		try {
			otherContext = context.createPackageContext(
					Contants.SAVEDATAPACKAGENAME,
					Context.CONTEXT_IGNORE_SECURITY);
			SharedPreferences settings = otherContext.getSharedPreferences(
					PREFERENCE_NAME, Context.MODE_WORLD_WRITEABLE);
			return settings.getFloat(key, defaultValue);
		} catch (NameNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return defaultValue;
	}

	/**
	 * put boolean preferences
	 * 
	 * @param context
	 * @param key
	 *            The name of the preference to modify
	 * @param value
	 *            The new value for the preference
	 * @return True if the new values were successfully written to persistent
	 *         storage.
	 */
	public static boolean putBoolean(Context context, String key, boolean value) {
		Context otherContext;
		try {
			otherContext = context.createPackageContext(
					Contants.SAVEDATAPACKAGENAME,
					Context.CONTEXT_IGNORE_SECURITY);
			SharedPreferences settings = otherContext.getSharedPreferences(
					PREFERENCE_NAME, Context.MODE_WORLD_WRITEABLE);
			SharedPreferences.Editor editor = settings.edit();
			editor.putBoolean(key, value);
			return editor.commit();
		} catch (NameNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return false;
	}

	/**
	 * get boolean preferences, default is false
	 * 
	 * @param context
	 * @param key
	 *            The name of the preference to retrieve
	 * @return The preference value if it exists, or false. Throws
	 *         ClassCastException if there is a preference with this name that
	 *         is not a boolean
	 * @see #getBoolean(Context, String, boolean)
	 */
	public static boolean getBoolean(Context context, String key) {
		return getBoolean(context, key, false);
	}

	/**
	 * get boolean preferences
	 * 
	 * @param context
	 * @param key
	 *            The name of the preference to retrieve
	 * @param defaultValue
	 *            Value to return if this preference does not exist
	 * @return The preference value if it exists, or defValue. Throws
	 *         ClassCastException if there is a preference with this name that
	 *         is not a boolean
	 */
	public static boolean getBoolean(Context context, String key,
			boolean defaultValue) {
		Context otherContext;
		try {
			otherContext = context.createPackageContext(
					Contants.SAVEDATAPACKAGENAME,
					Context.CONTEXT_IGNORE_SECURITY);
			SharedPreferences settings = otherContext.getSharedPreferences(
					PREFERENCE_NAME, Context.MODE_WORLD_WRITEABLE);
			return settings.getBoolean(key, defaultValue);
		} catch (NameNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return defaultValue;
	}
	public static AllRemind getAllRemind(Context context,String str){
		AllRemind allRemind = null;
		String jsonStr = PreferencesUtils.getString(context, str, "");
		Gson gson = new Gson();
		if(TextUtils.isEmpty(jsonStr)){
			
		}else{
			allRemind = gson.fromJson(jsonStr, AllRemind.class);
		}
		
		return allRemind;
	}
}
