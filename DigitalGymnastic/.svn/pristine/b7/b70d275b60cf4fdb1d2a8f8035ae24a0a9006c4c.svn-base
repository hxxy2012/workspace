package com.hike.digitalgymnastic;

import android.annotation.SuppressLint;
import android.bluetooth.BluetoothDevice;
import android.content.Context;
import android.content.Intent;
import android.graphics.Rect;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.text.TextUtils;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.WindowManager;
import android.widget.FrameLayout;
import android.widget.PopupWindow;
import android.widget.TextView;

import com.hike.digitalgymnastic.fragment.FragmentCircle;
import com.hike.digitalgymnastic.fragment.FragmentDevices;
import com.hike.digitalgymnastic.fragment.FragmentMy;
import com.hike.digitalgymnastic.fragment.HomeFragment;
import com.hike.digitalgymnastic.http.INetResult;
import com.hike.digitalgymnastic.request.BaseDao;
import com.hike.digitalgymnastic.service.BLEDataType;
import com.hike.digitalgymnastic.tools.UtilLog;
import com.hike.digitalgymnastic.utils.LocalDataUtils;
import com.hike.digitalgymnastic.utils.ReqeustCode;
import com.hike.digitalgymnastic.utils.Utils;
import com.hiko.enterprisedigital.R;
import com.lidroid.xutils.ViewUtils;
import com.lidroid.xutils.http.ResponseInfo;
import com.lidroid.xutils.view.annotation.ContentView;
import com.lidroid.xutils.view.annotation.ViewInject;

import java.util.ArrayList;
import java.util.List;

@ContentView(R.layout.activity_main_test)
public class MainActivity extends BaseFragmentActivity    {

    private static final String TAG = "MainActivity";

    private FragmentManager manager = getSupportFragmentManager();

    private Fragment mFragment;

    private int mPosition = R.id.id_menu_rbtn_home;

    private List<Fragment> fragments = new ArrayList<Fragment>();




    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        UtilLog.e(TAG, "oncreate");
        ViewUtils.inject(this);
        forgotFirstRequest();
        LocalDataUtils.saveLoginInfo(this, true);
        switchFragment(mPosition);
    }

    public void switchFragment(int position) {
        mFragment = manager.findFragmentByTag(position + "");
        if (mFragment != null) {
            return;
        }
        switch (position) {
            case R.id.id_menu_rbtn_home:// 首页
                mFragment = HomeFragment.newInstance();
                break;
            case R.id.id_menu_rbtn_circle:// 圈子
                mFragment = FragmentCircle.newInstance();
                break;
            case R.id.id_menu_rbtn_analyze:// 装备
                mFragment = FragmentDevices.newInstance();
                break;
            default:// 我的
                mFragment = FragmentMy.newInstance();
                break;
        }
        FragmentTransaction ft = manager.beginTransaction();
        ft.replace(R.id.id_rlyt_fragment, mFragment, position + "");
        ft.commit();
        mPosition = position;

    }

    /**
     * 菜单点击事件
     */
    public void menuOnClick(View v) {
        switch (v.getId()) {
            case R.id.id_menu_rbtn_home:// 首页
                switchFragment(v.getId());
                break;
            case R.id.id_menu_rbtn_circle:// 圈子
                switchFragment(v.getId());
                break;
            case R.id.id_menu_rbtn_analyze:// 分析
                switchFragment(v.getId());
                break;
            case R.id.id_menu_rbtn_my:// 我的
                switchFragment(v.getId());
                break;
        }
    }

    boolean isExit = false;

    @SuppressLint("HandlerLeak")
    Handler mHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            isExit = false;
        }
    };

    private void reportPushToken(final String token) {
        new Thread(new Runnable() {

            @Override
            public void run() {
                pushTokenDao.ReportPushToken(token, null);
            }
        }).start();
    }

    BaseDao pushTokenDao = new BaseDao(new INetResult() {

        @Override
        public void onResponseReceived(int requestCode) {

        }

        @Override
        public void onRequestSuccess(int requestCode) {
            UtilLog.e(TAG, "服务器推送Token绑定成功 !!!!");

        }

        @Override
        public void onRequestFaild(String errorNo, String errorMessage) {
            UtilLog.e(TAG, "服务器推送Token绑定失败   !!!!");
        }

        @Override
        public void onNoConnect() {

        }

        @Override
        public void onRequestSuccess(ResponseInfo responseInfo) {
            UtilLog.e("MyLog", "success==" + responseInfo.toString());

        }
    }, MainActivity.this);


    public void exit() {
        if (!isExit) {
            isExit = true;
            Utils.showMessage(this, "再按一次退出程序");
            mHandler.postDelayed(new Runnable() {
                @Override
                public void run() {
                    mHandler.sendEmptyMessage(0);
                }
            }, 2000);
        } else {
            application.logout();
            finish();
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == ReqeustCode.FROM_CAPTURE) {
            if (fragments.size() > 0) {
                HomeFragment home = (HomeFragment) fragments.get(0);
                if (home != null) {
                    home.onActivityResult(requestCode, resultCode, data);
                }
            }

        }
    }

    @Override
    protected void onPause() {
        super.onPause();
        UtilLog.e(TAG, "onPause");

    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        UtilLog.e(TAG, "ondestory");

        if (HikoDigitalgyApplication.map.containsKey(this.getClass().getName())) {
            HikoDigitalgyApplication.map.remove(this.getClass().getName());
        }


    }




}
